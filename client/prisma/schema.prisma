generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "postgres"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}
model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  premium       Boolean   @default(false)
  accounts      Account[]
  boards        Board[]
  sessions      Session[]
  itemVotes     itemVote[]
}
model Board {
  id        String     @id @default(cuid())
  handle String @unique
  name      String?
  website   String     @default("")
  userId    String
  user      User       @relation(fields: [userId], references: [id])
  feedbacks Feedback[]
}
model Feedback {
  id        String   @id @default(cuid())
  title String
  description      String
  upvotes Int @default(0)
  createdAt DateTime @default(now())
  type String @default("other")
  boardId   String
  board     Board    @relation(fields: [boardId], references: [id])
  itemVotes itemVote[]
}
model itemVote {
  id            String    @id @default(cuid())
  feedbackId String
  feedback Feedback? @relation(fields: [feedbackId], references: [id])
  userId    String
  user      User?       @relation(fields: [userId], references: [id])
}
model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
